@model FeedbackDashboard.Models.FeedbackDashboardViewModel
@{
    ViewData["Title"] = "Feedback Dashboard";
}

<div class="feedback-dashboard">
    <div class="dashboard-header">
        <div class="breadcrumb">
            <span class="breadcrumb-item">Dashboard</span>
            <span class="breadcrumb-separator">/</span>
            <span class="breadcrumb-item active">Feedback</span>
        </div>
        <h1 class="page-title">Feedback</h1>
    </div>

    <div class="dashboard-grid">
        <!-- Ratings Section -->
        <div class="ratings-section">
            <div class="section-header">
                <h2>Ratings</h2>
                <div class="time-selector">
                    <button class="time-btn active">This Week</button>
                    <button class="time-btn">This Year</button>
                </div>
            </div>
            
            <div class="ratings-content">
                <div class="overall-rating">
                    <div class="rating-circle">
                        <div class="rating-value">@Model.RatingSummary.OverallRating.ToString("F1")</div>
                        <div class="rating-scale">/5</div>
                    </div>
                    <div class="rating-info">
                        <div class="review-count">@Model.RatingSummary.TotalReviews.ToString("N0") Reviews</div>
                    </div>
                </div>

                <div class="category-ratings">
                    @foreach (var category in Model.RatingSummary.CategoryRatings)
                    {
                        <div class="category-item">
                            <div class="category-label">@category.Category</div>
                            <div class="category-rating">@category.Rating.ToString("F1")</div>
                            <div class="rating-bar">
                                <div class="rating-fill" style="width: @((category.Rating / 5.0) * 100)%"></div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Statistics Section -->
        <div class="statistics-section">
            <div class="section-header">
                <h2>Feedback Statistics</h2>
                <div class="time-selector">
                    <button class="time-btn">This Week</button>
                    <button class="time-btn active">This Year</button>
                </div>
            </div>
            
            <div class="stats-summary">
                <div class="stat-item low-ratings">
                    <div class="stat-value">@Model.Statistics.LowRatingsCount</div>
                    <div class="stat-label">Rating 1-3</div>
                </div>
                <div class="stat-item high-ratings">
                    <div class="stat-value">@Model.Statistics.HighRatingsCount</div>
                    <div class="stat-label">Rating 4-5</div>
                </div>
            </div>

            <div class="chart-container">
                <canvas id="feedbackChart" width="400" height="200"></canvas>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filters-section">
        <div class="filter-group">
            <select class="filter-select">
                @foreach (var option in Model.Filters.RatingOptions)
                {
                    <option value="@option" selected="@(option == Model.Filters.SelectedRating)">@option</option>
                }
            </select>
            
            <select class="filter-select">
                @foreach (var option in Model.Filters.CategoryOptions)
                {
                    <option value="@option" selected="@(option == Model.Filters.SelectedCategory)">@option</option>
                }
            </select>
            
            <select class="filter-select">
                @foreach (var option in Model.Filters.EventOptions)
                {
                    <option value="@option" selected="@(option == Model.Filters.SelectedEvent)">@option</option>
                }
            </select>
        </div>
        
        <div class="date-range">
            <span class="date-range-text">@Model.DateRange.StartDate.ToString("d MMMM yyyy") – @Model.DateRange.EndDate.ToString("d MMMM yyyy")</span>
        </div>
    </div>

    <!-- Feedback Cards -->
    <div class="feedback-cards">
        @foreach (var feedback in Model.FeedbackCards)
        {
            <div class="feedback-card">
                <div class="card-header">
                    <div class="reviewer-info">
                        <h3 class="reviewer-name">@feedback.ReviewerName</h3>
                        <span class="review-date">@feedback.ReviewDate.ToString("MMMM d, yyyy")</span>
                    </div>
                    <div class="star-rating">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span class="star @(i <= feedback.StarRating ? "filled" : "")">★</span>
                        }
                        <span class="rating-number">@feedback.StarRating</span>
                    </div>
                </div>
                
                <div class="card-content">
                    <p class="review-text">@feedback.ReviewContent</p>
                </div>
                
                <div class="card-footer">
                    <div class="event-info">
                        <span class="event-dot" style="background-color: @feedback.CategoryColor;"></span>
                        <span class="event-name">@feedback.EventName</span>
                        <span class="event-category">@feedback.EventCategory</span>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination -->
    <div class="pagination-section">
        <div class="pagination-info">
            Showing @Model.Pagination.StartEntry out of @Model.Pagination.TotalEntries entries
        </div>
        
        <div class="pagination-controls">
            <button class="page-btn" disabled>‹</button>
            @for (int i = 1; i <= Math.Min(8, Model.Pagination.TotalPages); i++)
            {
                <button class="page-btn @(i == Model.Pagination.CurrentPage ? "active" : "")">@i</button>
            }
            @if (Model.Pagination.TotalPages > 8)
            {
                <span class="page-ellipsis">...</span>
                <button class="page-btn">@Model.Pagination.TotalPages</button>
            }
            <button class="page-btn">›</button>
        </div>
    </div>
</div>

<!-- Chart.js Script -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const ctx = document.getElementById('feedbackChart').getContext('2d');
        const monthlyData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Statistics.MonthlyData));
        
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: monthlyData.map(d => d.month),
                datasets: [
                    {
                        label: 'Rating 1-3',
                        data: monthlyData.map(d => d.lowRatings),
                        backgroundColor: '#f3e8ff',
                        borderColor: '#a855f7',
                        borderWidth: 1,
                        borderRadius: 4
                    },
                    {
                        label: 'Rating 4-5',
                        data: monthlyData.map(d => d.highRatings),
                        backgroundColor: '#ec4899',
                        borderColor: '#ec4899',
                        borderWidth: 1,
                        borderRadius: 4
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: '#f1f5f9'
                        },
                        ticks: {
                            color: '#64748b'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#64748b'
                        }
                    }
                }
            }
        });
    });
</script>